// text.h V0.71 230814 qrt@qland.de

#pragma once

#include "pico/stdlib.h"
#include "draw.h"

#define COMPFB          15              // 15 or 31 frequent bytes for compression
#define PRECLEAR        true            // false = no preclear, set and unset pixels have to be written
                                        // true  = preclear, only set pixels have to be written
#define TOPLEFT         0               // char origin
#define BOTLEFT         1               //
#define BOTRIGHT        2               //
#define MIDXY           3               //

class Text
{
    public:
        static uint16_t drawText(char* text, int16_t x, int16_t y);
        static uint16_t drawText(char* text, int16_t x, int16_t y, const uint8_t* _font, uint8_t _origin);
        static uint16_t getTextWidth(char* text, const uint8_t* _font);

    private:
        static void setFont(const uint8_t* _font);
        static void setFont(const uint8_t* _font, uint8_t _origin);
        static void drawChar(char c);
        static void deComp();
        static void drawByte(int16_t x, int16_t y, uint8_t b, uint8_t h);        
        // static uint8_t getPosX() { return xstart; }

        static int16_t xstart, ystart;
        static uint8_t* p;                                  // font table pointer
        static uint8_t* fbp;                                // frequent byte table pointer
        static uint8_t b, rb;                               // byte, repeat byte
        static int8_t rc;                                   // repeat counter, <0 raw byte, ==0 new byte, >0 repeat byte

        static uint8_t* font;
        static uint8_t orix, oriy;
        static uint8_t origin;

        static uint8_t *image;
};

//  %+-./0123456789:?FMSTWaehou COMPFB 15
// const uint8_t mains_6_4[] = {
//     0x06, 0x02, 0x25, 0x3f, 0x00, 0x29, 0x01, 0x08, 0x2a, 0x1e, 0x22, 0x06, 0x20, 0x0c, 0x18, 0x04,
//     0x1c, 0x20, 0x04, 0x01, 0x23, 0x2b, 0x04, 0x05, 0x50, 0xfa, 0x3e, 0x08, 0x00, 0x2d, 0x04, 0x01,
//     0x53, 0x2e, 0x01, 0x01, 0xa0, 0x2f, 0x05, 0x06, 0xfc, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x30, 0x04,
//     0x04, 0x70, 0x30, 0x00, 0x70, 0x31, 0x04, 0x04, 0x80, 0x10, 0xa0, 0x20, 0x32, 0x04, 0x05, 0xf8,
//     0x32, 0x31, 0xf8, 0x26, 0x33, 0x04, 0x04, 0x80, 0x31, 0xf8, 0x16, 0x34, 0x04, 0x05, 0xb0, 0x60,
//     0x10, 0xf8, 0x28, 0x35, 0x04, 0x05, 0xf8, 0x17, 0x01, 0xf8, 0x19, 0x36, 0x04, 0x03, 0x70, 0x01,
//     0xc0, 0x37, 0x04, 0x05, 0xfb, 0x03, 0x01, 0x39, 0x07, 0x38, 0x04, 0x05, 0xf8, 0x1a, 0x01, 0xf8,
//     0x1a, 0x39, 0x04, 0x03, 0x90, 0x31, 0x70, 0x3a, 0x01, 0x02, 0xf8, 0x24, 0x3f, 0x05, 0x06, 0xfc,
//     0x02, 0x01, 0x29, 0x06, 0x00, 0x46, 0x05, 0x05, 0x10, 0xf0, 0x05, 0x40, 0x20, 0x4d, 0x05, 0x05,
//     0x10, 0x90, 0xb0, 0x90, 0x10, 0x53, 0x05, 0x04, 0x80, 0x02, 0xf8, 0x19, 0x54, 0x05, 0x03, 0x41,
//     0x10, 0x41, 0x57, 0x05, 0x05, 0x10, 0xc0, 0xb0, 0xc0, 0x10, 0x61, 0x05, 0x05, 0xf8, 0x10, 0x62,
//     0xf8, 0x3c, 0x65, 0x05, 0x03, 0xe0, 0x62, 0xd0, 0x68, 0x05, 0x05, 0x10, 0x50, 0xd1, 0xf8, 0x38,
//     0x6f, 0x05, 0x03, 0xe0, 0x82, 0xe0, 0x75, 0x05, 0x03, 0x70, 0xa2, 0x70, 0x00
// };

//  %+-./0123456789:<>?DFMSTWadehmou 80 dis 81 mis COMPFB 15
const uint8_t mains_8_5[] = {
    0x08, 0x02, 0x00, 0x89, 0x80, 0x81, 0x10, 0x01, 0xff, 0x04, 0x7e, 0x94, 0x03, 0x88, 0x42, 0x78,
    0x82, 0x20, 0x07, 0x07, 0x80, 0x51, 0xfb, 0x2e, 0x80, 0x00, 0x54, 0x25, 0x06, 0x07, 0xc0, 0xfc,
    0x25, 0x12, 0x48, 0xa4, 0x42, 0x2b, 0x05, 0x04, 0x41, 0xf8, 0xfe, 0x41, 0x2d, 0x05, 0x01, 0x44,
    0x2e, 0x02, 0x02, 0xf0, 0xc0, 0x2f, 0x05, 0x06, 0xfc, 0xc0, 0x30, 0x0c, 0x03, 0x00, 0x30, 0x05,
    0x06, 0x80, 0xfb, 0xa1, 0x91, 0x89, 0x7e, 0x31, 0x05, 0x03, 0xe1, 0x60, 0x21, 0x32, 0x05, 0x06,
    0xfc, 0xc2, 0xa1, 0x91, 0x89, 0xc6, 0x33, 0x05, 0x05, 0xc0, 0x30, 0x11, 0xf8, 0x76, 0x34, 0x05,
    0x06, 0xfc, 0x18, 0x14, 0x92, 0xff, 0x90, 0x35, 0x05, 0x06, 0xf9, 0x40, 0x8f, 0x11, 0xf8, 0x71,
    0x36, 0x05, 0x07, 0xf9, 0x7c, 0x92, 0xf0, 0x91, 0xf8, 0x60, 0x37, 0x05, 0x06, 0xa0, 0x50, 0xfa,
    0xc1, 0x39, 0x07, 0x38, 0x05, 0x05, 0xf8, 0x76, 0x12, 0xf8, 0x76, 0x39, 0x05, 0x06, 0xf8, 0x06,
    0x11, 0xf9, 0x49, 0x3e, 0x3a, 0x02, 0x02, 0xf0, 0xcc, 0x3c, 0x05, 0x06, 0x40, 0xfb, 0x28, 0x44,
    0x82, 0x00, 0x3e, 0x05, 0x06, 0xe0, 0xfb, 0x44, 0x28, 0x10, 0x00, 0x3f, 0x07, 0x08, 0x00, 0xfd,
    0x02, 0x01, 0xb1, 0x09, 0x06, 0x00, 0x44, 0x07, 0x07, 0x30, 0x60, 0x31, 0xc0, 0xf9, 0x3c, 0x00,
    0x46, 0x07, 0x08, 0x30, 0x60, 0x10, 0xfb, 0x1d, 0x01, 0x03, 0x00, 0x4d, 0x07, 0x08, 0x30, 0x60,
    0xfc, 0x87, 0x18, 0x87, 0xff, 0x81, 0x53, 0x07, 0x08, 0xf9, 0xc6, 0x49, 0x11, 0xfa, 0x52, 0x23,
    0x00, 0x54, 0x07, 0x07, 0x00, 0xa0, 0x30, 0x60, 0x30, 0xa0, 0x00, 0x57, 0x07, 0x08, 0x50, 0xfd,
    0x7f, 0x81, 0x78, 0x81, 0x7f, 0x01, 0x61, 0x07, 0x07, 0xf8, 0x68, 0x92, 0xfa, 0xf8, 0x80, 0x00,
    0x64, 0x07, 0x07, 0xf8, 0x70, 0xb2, 0xfa, 0x51, 0xff, 0x80, 0x65, 0x07, 0x06, 0x00, 0xd0, 0x92,
    0xf9, 0x58, 0x00, 0x68, 0x07, 0x08, 0x30, 0x60, 0xb0, 0x70, 0xfa, 0x84, 0xf8, 0x80, 0x6d, 0x07,
    0x08, 0x70, 0xfd, 0xfc, 0x04, 0xf8, 0x04, 0xf8, 0x00, 0x6f, 0x07, 0x06, 0x00, 0xd0, 0xf1, 0x84,
    0xd0, 0x00, 0x72, 0x07, 0x08, 0x20, 0xf9, 0xfc, 0x88, 0x71, 0xf9, 0x08, 0x00, 0x75, 0x07, 0x08,
    0x70, 0xf8, 0x7c, 0x21, 0xfa, 0x44, 0xfc, 0x80, 0x80, 0x07, 0x08, 0x00, 0xfd, 0xe8, 0xcc, 0xaa,
    0x19, 0x08, 0x00, 0x81, 0x07, 0x05, 0x80, 0x51, 0x80, 0x21, 0x80, 0x00
};

#define CDIS    0x80
#define CMIS    0x81

//  %*+-./0123456789:<>?DEFMWYhms COMPFB 15
const uint8_t mains_10_7[] = {                              
    0x0a, 0x03, 0x00, 0x03, 0x02, 0x01, 0xff, 0x30, 0x11, 0xfc, 0xf0, 0xfe, 0x18, 0x1f, 0xf8, 0x08,
    0x20, 0x20, 0x07, 0x01, 0x0d, 0x25, 0x07, 0x0c, 0xfe, 0x46, 0x69, 0x29, 0xb6, 0x50, 0x58, 0x88,
    0x02, 0x30, 0x21, 0x30, 0x2a, 0x07, 0x0b, 0xe0, 0xfd, 0xa8, 0x70, 0xfc, 0x70, 0xa8, 0x20, 0x02,
    0x30, 0x02, 0x2b, 0x07, 0x04, 0x51, 0x71, 0x51, 0x07, 0x2d, 0x07, 0x02, 0x55, 0x07, 0x2e, 0x02,
    0x02, 0x01, 0x11, 0x2f, 0x07, 0x0a, 0xff, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x01, 0x05,
    0x30, 0x07, 0x0f, 0x70, 0x90, 0xff, 0x43, 0x21, 0x13, 0xfe, 0xfc, 0x00, 0x01, 0x03, 0x20, 0x10,
    0x30, 0x00, 0x31, 0x07, 0x07, 0x00, 0x21, 0x41, 0x02, 0x21, 0x11, 0x21, 0x32, 0x07, 0x0a, 0xfe,
    0x0c, 0x8e, 0xc3, 0x61, 0x31, 0x1f, 0x0e, 0x11, 0x24, 0x33, 0x07, 0x0c, 0x20, 0x10, 0x61, 0xfc,
    0x39, 0xff, 0xe6, 0x01, 0x03, 0x22, 0x10, 0x30, 0x34, 0x07, 0x0c, 0xfb, 0xc0, 0xf0, 0x9c, 0x87,
    0x41, 0xf8, 0x80, 0x01, 0x21, 0x11, 0x20, 0x35, 0x07, 0x0c, 0x00, 0xf9, 0x3f, 0x1f, 0x61, 0xfa,
    0xf1, 0xe1, 0x01, 0x23, 0x10, 0x30, 0x36, 0x07, 0x0f, 0xc0, 0x70, 0xf8, 0x26, 0xf0, 0x13, 0xfc,
    0xf1, 0xe1, 0x00, 0x01, 0x03, 0x21, 0x10, 0x30, 0x37, 0x07, 0x0b, 0x00, 0x10, 0x30, 0xfb, 0x81,
    0xf9, 0x7f, 0x07, 0x02, 0x11, 0x01, 0x38, 0x07, 0x0c, 0xf9, 0xee, 0xff, 0x62, 0x40, 0xfa, 0xee,
    0x01, 0x03, 0x22, 0x10, 0x30, 0x39, 0x07, 0x0d, 0xf9, 0x1e, 0x3f, 0xf0, 0x21, 0xfa, 0x93, 0xfe,
    0x7c, 0x22, 0x10, 0x31, 0x00, 0x3a, 0x02, 0x02, 0xa1, 0x11, 0x3c, 0x07, 0x0c, 0xe0, 0xfc, 0x70,
    0xd8, 0x8c, 0x06, 0x02, 0x03, 0x30, 0x10, 0x20, 0x00, 0x3e, 0x07, 0x0c, 0x20, 0xff, 0x06, 0x8c,
    0xd8, 0x70, 0x20, 0x00, 0x02, 0x03, 0x30, 0x03, 0x3f, 0x07, 0x0a, 0x00, 0x10, 0xfb, 0x63, 0x73,
    0x1f, 0x0e, 0x02, 0x11, 0x02, 0x44, 0x07, 0x0c, 0x30, 0x41, 0x30, 0x10, 0x90, 0x70, 0x20, 0x11,
    0x20, 0x10, 0x30, 0x00, 0x45, 0x07, 0x08, 0x10, 0x41, 0xfb, 0x33, 0x7b, 0x03, 0x87, 0x16, 0x46,
    0x07, 0x09, 0x10, 0x41, 0xfb, 0x33, 0x7b, 0x03, 0x07, 0x14, 0x01, 0x4d, 0x07, 0x0a, 0x40, 0x90,
    0xa0, 0x50, 0xa0, 0x90, 0x40, 0x11, 0x02, 0x11, 0x57, 0x07, 0x0b, 0x41, 0xfa, 0x60, 0x30, 0x60,
    0x41, 0x10, 0x30, 0x02, 0x30, 0x10, 0x59, 0x07, 0x0c, 0xf9, 0x0f, 0x1f, 0x81, 0xb0, 0xf9, 0x0f,
    0x00, 0x21, 0x11, 0x21, 0x00, 0x68, 0x07, 0x09, 0x41, 0xf8, 0x10, 0xd1, 0xc0, 0x80, 0x11, 0x02,
    0x11, 0x6d, 0x07, 0x0b, 0xc0, 0x80, 0xd0, 0xc1, 0xd0, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x73,
    0x07, 0x0d, 0x50, 0xf8, 0x78, 0xf0, 0x68, 0xfa, 0xc8, 0xd8, 0x98, 0x11, 0x22, 0x10, 0x30, 0x00
};
